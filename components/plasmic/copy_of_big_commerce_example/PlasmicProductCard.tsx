// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vn4GCfRoYe35APzZGsNDnF
// Component: nH5iseI9bs8m34
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ProductLink } from "@plasmicpkgs/commerce"; // plasmic-import: nVOugGbv73tFTR/codeComponent
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: QD8dH-4J4XrXzR/codeComponent
import { ProductPriceComponent } from "@plasmicpkgs/commerce"; // plasmic-import: fzJDSoSq7d4NGS/codeComponent
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: nc8Y9S1M-HVVlp/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_color_tokens/plasmic_plasmic_kit_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_copy_of_big_commerce_example.module.css"; // plasmic-import: vn4GCfRoYe35APzZGsNDnF/projectcss
import sty from "./PlasmicProductCard.module.css"; // plasmic-import: nH5iseI9bs8m34/css

import WishlistIcon from "./icons/PlasmicIcon__Wishlist"; // plasmic-import: LA7TScipP25zOl/icon

export type PlasmicProductCard__VariantMembers = {
  color: "violet" | "white" | "black" | "pink";
  shape: "slim";
  hideWishlist: "hideWishlist";
  imageUrl: "imageUrl";
  hidePrice: "hidePrice";
};

export type PlasmicProductCard__VariantsArgs = {
  color?: SingleChoiceArg<"violet" | "white" | "black" | "pink">;
  shape?: SingleChoiceArg<"slim">;
  hideWishlist?: SingleBooleanChoiceArg<"hideWishlist">;
  imageUrl?: SingleBooleanChoiceArg<"imageUrl">;
  hidePrice?: SingleBooleanChoiceArg<"hidePrice">;
};

type VariantPropType = keyof PlasmicProductCard__VariantsArgs;
export const PlasmicProductCard__VariantProps = new Array<VariantPropType>(
  "color",
  "shape",
  "hideWishlist",
  "imageUrl",
  "hidePrice"
);

export type PlasmicProductCard__ArgsType = {
  imageIndex?: number;
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicProductCard__ArgsType;
export const PlasmicProductCard__ArgProps = new Array<ArgPropType>(
  "imageIndex",
  "children",
  "slot"
);

export type PlasmicProductCard__OverridesType = {
  root?: p.Flex<"div">;
  productLink?: p.Flex<typeof ProductLink>;
  svg?: p.Flex<"svg">;
  imageContainer?: p.Flex<"div">;
  productTextField?: p.Flex<typeof ProductTextField>;
};

export interface DefaultProductCardProps {
  imageIndex?: number;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  color?: SingleChoiceArg<"violet" | "white" | "black" | "pink">;
  shape?: SingleChoiceArg<"slim">;
  hideWishlist?: SingleBooleanChoiceArg<"hideWishlist">;
  imageUrl?: SingleBooleanChoiceArg<"imageUrl">;
  hidePrice?: SingleBooleanChoiceArg<"hidePrice">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductCard__RenderFunc(props: {
  variants: PlasmicProductCard__VariantsArgs;
  args: PlasmicProductCard__ArgsType;
  overrides: PlasmicProductCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          imageIndex: undefined
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.color
          : undefined
      },

      {
        path: "shape",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.shape
          : undefined
      },

      {
        path: "hideWishlist",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.hideWishlist
          : undefined
      },

      {
        path: "imageUrl",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.imageUrl
          : undefined
      },

      {
        path: "hidePrice",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.hidePrice
          : undefined
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root,
        "cover-container" as const,
        {
          [sty.rootcolor_black]: hasVariant($state, "color", "black"),
          [sty.rootcolor_pink]: hasVariant($state, "color", "pink"),
          [sty.rootcolor_violet]: hasVariant($state, "color", "violet"),
          [sty.rootcolor_white]: hasVariant($state, "color", "white"),
          [sty.rootimageUrl]: hasVariant($state, "imageUrl", "imageUrl"),
          [sty.rootshape_slim]: hasVariant($state, "shape", "slim")
        }
      )}
    >
      <ProductLink
        data-plasmic-name={"productLink"}
        data-plasmic-override={overrides.productLink}
        className={classNames("__wab_instance", sty.productLink)}
        linkDest={"/product" as const}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox___6CgU0, {
            [sty.freeBoxcolor_violet___6CgU0I4W9]: hasVariant(
              $state,
              "color",
              "violet"
            ),
            [sty.freeBoxhideWishlist___6CgU0WH8HG]: hasVariant(
              $state,
              "hideWishlist",
              "hideWishlist"
            ),
            [sty.freeBoximageUrl___6CgU0OOwy]: hasVariant(
              $state,
              "imageUrl",
              "imageUrl"
            ),
            [sty.freeBoxshape_slim___6CgU0Ou1O6]: hasVariant(
              $state,
              "shape",
              "slim"
            )
          })}
        >
          {(hasVariant($state, "shape", "slim") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__jnhJk, {
                [sty.freeBoxhideWishlist__jnhJKwH8HG]: hasVariant(
                  $state,
                  "hideWishlist",
                  "hideWishlist"
                ),
                [sty.freeBoximageUrl__jnhJkoOwy]: hasVariant(
                  $state,
                  "imageUrl",
                  "imageUrl"
                ),
                [sty.freeBoxshape_slim__jnhJkou1O6]: hasVariant(
                  $state,
                  "shape",
                  "slim"
                )
              })}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__quFXf, {
                  [sty.freeBoxcolor_white__quFXfmgin0]: hasVariant(
                    $state,
                    "color",
                    "white"
                  ),
                  [sty.freeBoxhideWishlist__quFXfwH8HG]: hasVariant(
                    $state,
                    "hideWishlist",
                    "hideWishlist"
                  ),
                  [sty.freeBoximageUrl__quFXfOOwy]: hasVariant(
                    $state,
                    "imageUrl",
                    "imageUrl"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__iyrSl, {
                    [sty.freeBoxhideWishlist__iyrSlwH8HG]: hasVariant(
                      $state,
                      "hideWishlist",
                      "hideWishlist"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0Rbu7)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField__mGbo
                          )}
                          field={"name" as const}
                        />
                      ),

                      value: args.children
                    })}
                  </div>

                  {(
                    hasVariant($state, "hideWishlist", "hideWishlist")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__d2N2A,
                        {
                          [sty.freeBoxhideWishlist__d2N2AwH8HG]: hasVariant(
                            $state,
                            "hideWishlist",
                            "hideWishlist"
                          )
                        }
                      )}
                    >
                      <WishlistIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg, {
                          [sty.svgcolor_white]: hasVariant(
                            $state,
                            "color",
                            "white"
                          )
                        })}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox___2TQRm)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rUo5, {
                      [sty.freeBoxcolor_violet__rUo5I4W9]: hasVariant(
                        $state,
                        "color",
                        "violet"
                      ),
                      [sty.freeBoxcolor_white__rUo5Mgin0]: hasVariant(
                        $state,
                        "color",
                        "white"
                      ),
                      [sty.freeBoxhidePrice__rUo5NxT0L]: hasVariant(
                        $state,
                        "hidePrice",
                        "hidePrice"
                      )
                    })}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <ProductPriceComponent
                          className={classNames(
                            "__wab_instance",
                            sty.productPrice__ubw56
                          )}
                        />
                      ),

                      value: args.slot
                    })}
                  </div>
                </div>
              </p.Stack>

              <div
                className={classNames(projectcss.all, sty.freeBox__jZyq1, {
                  [sty.freeBoximageUrl__jZyq1OOwy]: hasVariant(
                    $state,
                    "imageUrl",
                    "imageUrl"
                  ),
                  [sty.freeBoxshape_slim__jZyq1Ou1O6]: hasVariant(
                    $state,
                    "shape",
                    "slim"
                  )
                })}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__buJzR, {
                      [sty.freeBoximageUrl__buJzRoOwy]: hasVariant(
                        $state,
                        "imageUrl",
                        "imageUrl"
                      )
                    })}
                  >
                    {(
                      hasVariant($state, "imageUrl", "imageUrl") ? true : true
                    ) ? (
                      <ProductMedia
                        className={classNames(
                          "__wab_instance",
                          sty.productMedia__ww3I,
                          {
                            [sty.productMediacolor_black__ww3IDv0W3]:
                              hasVariant($state, "color", "black"),
                            [sty.productMediacolor_pink__ww3IBhiPq]: hasVariant(
                              $state,
                              "color",
                              "pink"
                            ),
                            [sty.productMediacolor_violet__ww3II4W9]:
                              hasVariant($state, "color", "violet"),
                            [sty.productMediacolor_white__ww3IMgin0]:
                              hasVariant($state, "color", "white"),
                            [sty.productMediahidePrice__ww3INxT0L]: hasVariant(
                              $state,
                              "hidePrice",
                              "hidePrice"
                            ),
                            [sty.productMediahideWishlist__ww3IWH8HG]:
                              hasVariant(
                                $state,
                                "hideWishlist",
                                "hideWishlist"
                              ),
                            [sty.productMediaimageUrl__ww3IOOwy]: hasVariant(
                              $state,
                              "imageUrl",
                              "imageUrl"
                            ),
                            [sty.productMediashape_slim__ww3IOu1O6]: hasVariant(
                              $state,
                              "shape",
                              "slim"
                            )
                          }
                        )}
                      />
                    ) : null}
                    {(
                      hasVariant($state, "imageUrl", "imageUrl") ? true : true
                    ) ? (
                      <div
                        data-plasmic-name={"imageContainer"}
                        data-plasmic-override={overrides.imageContainer}
                        className={classNames(
                          projectcss.all,
                          sty.imageContainer,
                          {
                            [sty.imageContainerimageUrl]: hasVariant(
                              $state,
                              "imageUrl",
                              "imageUrl"
                            )
                          }
                        )}
                      />
                    ) : null}
                  </div>
                ) : null}
              </div>
            </div>
          ) : null}
          {(hasVariant($state, "shape", "slim") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__zWt4Q, {
                [sty.freeBoxshape_slim__zWt4QOu1O6]: hasVariant(
                  $state,
                  "shape",
                  "slim"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__kXhSy, {
                  [sty.freeBoxshape_slim__kXhSyou1O6]: hasVariant(
                    $state,
                    "shape",
                    "slim"
                  )
                })}
              >
                <ProductMedia
                  className={classNames(
                    "__wab_instance",
                    sty.productMedia__crkD3,
                    {
                      [sty.productMediashape_slim__crkD3Ou1O6]: hasVariant(
                        $state,
                        "shape",
                        "slim"
                      )
                    }
                  )}
                />
              </div>

              <div
                className={classNames(projectcss.all, sty.freeBox__ob4GM, {
                  [sty.freeBoxcolor_black_shape_slim__ob4GMDv0W3Ou1O6]:
                    hasVariant($state, "shape", "slim") &&
                    hasVariant($state, "color", "black"),
                  [sty.freeBoxshape_slim__ob4GMou1O6]: hasVariant(
                    $state,
                    "shape",
                    "slim"
                  )
                })}
              >
                <ProductTextField
                  data-plasmic-name={"productTextField"}
                  data-plasmic-override={overrides.productTextField}
                  className={classNames(
                    "__wab_instance",
                    sty.productTextField,
                    {
                      [sty.productTextFieldcolor_black_shape_slim]:
                        hasVariant($state, "shape", "slim") &&
                        hasVariant($state, "color", "black"),
                      [sty.productTextFieldshape_slim]: hasVariant(
                        $state,
                        "shape",
                        "slim"
                      )
                    }
                  )}
                  field={"name" as const}
                />
              </div>
            </div>
          ) : null}
        </div>
      </ProductLink>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "productLink", "svg", "imageContainer", "productTextField"],
  productLink: ["productLink", "svg", "imageContainer", "productTextField"],
  svg: ["svg"],
  imageContainer: ["imageContainer"],
  productTextField: ["productTextField"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  productLink: typeof ProductLink;
  svg: "svg";
  imageContainer: "div";
  productTextField: typeof ProductTextField;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductCard__VariantsArgs;
    args?: PlasmicProductCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProductCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProductCard__ArgProps,
          internalVariantPropNames: PlasmicProductCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCard";
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    productLink: makeNodeComponent("productLink"),
    svg: makeNodeComponent("svg"),
    imageContainer: makeNodeComponent("imageContainer"),
    productTextField: makeNodeComponent("productTextField"),

    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
