// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vn4GCfRoYe35APzZGsNDnF
// Component: r8X98dJYm7GeAX
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: _gxfyOiD26jFy/component
import { ProductBox } from "@plasmicpkgs/commerce"; // plasmic-import: sSIiojQ0-zGH2z/codeComponent
import { ProductSlider } from "@plasmicpkgs/commerce"; // plasmic-import: N36wRbj6tpP8ly/codeComponent
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: nc8Y9S1M-HVVlp/codeComponent
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: QD8dH-4J4XrXzR/codeComponent
import { ProductVariantPicker } from "@plasmicpkgs/commerce"; // plasmic-import: f1FpsJML8BSa3r/codeComponent
import { AddToCartButton } from "@plasmicpkgs/commerce"; // plasmic-import: GCFZTVHMsGY68a/codeComponent
import Button from "../../Button"; // plasmic-import: 3WSrLSDMSkvMlu/component
import Collapse from "../../Collapse"; // plasmic-import: GaFy0B6nir_9z0/component
import Footer from "../../Footer"; // plasmic-import: Ut_4sWTqalBqM5/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_color_tokens/plasmic_plasmic_kit_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_copy_of_big_commerce_example.module.css"; // plasmic-import: vn4GCfRoYe35APzZGsNDnF/projectcss
import sty from "./PlasmicProduct.module.css"; // plasmic-import: r8X98dJYm7GeAX/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: VvfIq5mXaQPSnt/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 6-94mdzLN7_WkX/icon

export type PlasmicProduct__VariantMembers = {};

export type PlasmicProduct__VariantsArgs = {};
type VariantPropType = keyof PlasmicProduct__VariantsArgs;
export const PlasmicProduct__VariantProps = new Array<VariantPropType>();

export type PlasmicProduct__ArgsType = {};
type ArgPropType = keyof PlasmicProduct__ArgsType;
export const PlasmicProduct__ArgProps = new Array<ArgPropType>();

export type PlasmicProduct__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  productBox?: p.Flex<typeof ProductBox>;
  columns?: p.Flex<"div">;
  productSlider?: p.Flex<typeof ProductSlider>;
  h3?: p.Flex<"h3">;
  productVariantPicker?: p.Flex<typeof ProductVariantPicker>;
  addToCartButton?: p.Flex<typeof AddToCartButton>;
  button?: p.Flex<typeof Button>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultProductProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProduct__RenderFunc(props: {
  variants: PlasmicProduct__VariantsArgs;
  args: PlasmicProduct__ArgsType;
  overrides: PlasmicProduct__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <ProductBox
            data-plasmic-name={"productBox"}
            data-plasmic-override={overrides.productBox}
            className={classNames("__wab_instance", sty.productBox)}
            id={"77" as const}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <div
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__z6NTw)}
                  >
                    <ProductSlider
                      data-plasmic-name={"productSlider"}
                      data-plasmic-override={overrides.productSlider}
                      className={classNames(
                        "__wab_instance",
                        sty.productSlider
                      )}
                      slideContainer={
                        <ph.DataCtxReader>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__v3T1
                              )}
                            >
                              <ProductMedia
                                className={classNames(
                                  "__wab_instance",
                                  sty.productMedia__rsTs
                                )}
                              />
                            </div>
                          )}
                        </ph.DataCtxReader>
                      }
                      slideSelected={0 as const}
                      thumbsContainer={
                        <ph.DataCtxReader>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__o8AR4
                              )}
                            >
                              <ProductMedia
                                className={classNames(
                                  "__wab_instance",
                                  sty.productMedia__lIXxP
                                )}
                              />
                            </div>
                          )}
                        </ph.DataCtxReader>
                      }
                      thumbsVisible={4 as const}
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__imXp0)}
                  >
                    {true ? (
                      <h3
                        data-plasmic-name={"h3"}
                        data-plasmic-override={overrides.h3}
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          sty.h3
                        )}
                      >
                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField__r3Iqv
                          )}
                          field={"name" as const}
                        />
                      </h3>
                    ) : null}

                    <ProductTextField
                      className={classNames(
                        "__wab_instance",
                        sty.productTextField__tDxOt
                      )}
                      field={"description" as const}
                    />

                    <ProductVariantPicker
                      data-plasmic-name={"productVariantPicker"}
                      data-plasmic-override={overrides.productVariantPicker}
                      className={classNames(
                        "__wab_instance",
                        sty.productVariantPicker
                      )}
                    />

                    <AddToCartButton
                      data-plasmic-name={"addToCartButton"}
                      data-plasmic-override={overrides.addToCartButton}
                      className={classNames(
                        "__wab_instance",
                        sty.addToCartButton
                      )}
                    >
                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        color={"white" as const}
                      >
                        {"ADD TO CART"}
                      </Button>
                    </AddToCartButton>

                    <Collapse
                      className={classNames(
                        "__wab_instance",
                        sty.collapse__eVxK
                      )}
                      content={
                        "This is a limited edition production run. Printing starts when the drop ends."
                      }
                      title={"Care"}
                    />

                    <Collapse
                      className={classNames(
                        "__wab_instance",
                        sty.collapse__b05LH
                      )}
                      content={
                        "This is a limited edition production run. Printing starts when the drop ends. Reminder: Bad Boys For Life. Shipping may take 10+ days due to COVID-19."
                      }
                      title={"Details"}
                    />
                  </p.Stack>
                </div>
              )}
            </ph.DataCtxReader>
          </ProductBox>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "productBox",
    "columns",
    "productSlider",
    "h3",
    "productVariantPicker",
    "addToCartButton",
    "button",
    "footer"
  ],
  navbar: ["navbar"],
  productBox: [
    "productBox",
    "columns",
    "productSlider",
    "h3",
    "productVariantPicker",
    "addToCartButton",
    "button"
  ],
  columns: [
    "columns",
    "productSlider",
    "h3",
    "productVariantPicker",
    "addToCartButton",
    "button"
  ],
  productSlider: ["productSlider"],
  h3: ["h3"],
  productVariantPicker: ["productVariantPicker"],
  addToCartButton: ["addToCartButton", "button"],
  button: ["button"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  productBox: typeof ProductBox;
  columns: "div";
  productSlider: typeof ProductSlider;
  h3: "h3";
  productVariantPicker: typeof ProductVariantPicker;
  addToCartButton: typeof AddToCartButton;
  button: typeof Button;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProduct__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProduct__VariantsArgs;
    args?: PlasmicProduct__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProduct__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProduct__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProduct__ArgProps,
          internalVariantPropNames: PlasmicProduct__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProduct__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProduct";
  } else {
    func.displayName = `PlasmicProduct.${nodeName}`;
  }
  return func;
}

export const PlasmicProduct = Object.assign(
  // Top-level PlasmicProduct renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    productBox: makeNodeComponent("productBox"),
    columns: makeNodeComponent("columns"),
    productSlider: makeNodeComponent("productSlider"),
    h3: makeNodeComponent("h3"),
    productVariantPicker: makeNodeComponent("productVariantPicker"),
    addToCartButton: makeNodeComponent("addToCartButton"),
    button: makeNodeComponent("button"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicProduct
    internalVariantProps: PlasmicProduct__VariantProps,
    internalArgProps: PlasmicProduct__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProduct;
/* prettier-ignore-end */
