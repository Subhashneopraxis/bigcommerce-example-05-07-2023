// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vn4GCfRoYe35APzZGsNDnF
// Component: GaFy0B6nir_9z0
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_color_tokens/plasmic_plasmic_kit_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_copy_of_big_commerce_example.module.css"; // plasmic-import: vn4GCfRoYe35APzZGsNDnF/projectcss
import sty from "./PlasmicCollapse.module.css"; // plasmic-import: GaFy0B6nir_9z0/css

import ChevronIcon from "./icons/PlasmicIcon__Chevron"; // plasmic-import: avfRMLSCqXyHWi/icon

export type PlasmicCollapse__VariantMembers = {
  isOpen: "isOpen";
};

export type PlasmicCollapse__VariantsArgs = {
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
};

type VariantPropType = keyof PlasmicCollapse__VariantsArgs;
export const PlasmicCollapse__VariantProps = new Array<VariantPropType>(
  "isOpen"
);

export type PlasmicCollapse__ArgsType = {
  title?: React.ReactNode;
  content?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCollapse__ArgsType;
export const PlasmicCollapse__ArgProps = new Array<ArgPropType>(
  "title",
  "content"
);

export type PlasmicCollapse__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultCollapseProps {
  title?: React.ReactNode;
  content?: React.ReactNode;
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCollapse__RenderFunc(props: {
  variants: PlasmicCollapse__VariantsArgs;
  args: PlasmicCollapse__ArgsType;
  overrides: PlasmicCollapse__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isOpen",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.isOpen
          : undefined
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root,
        { [sty.rootisOpen]: hasVariant($state, "isOpen", "isOpen") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__yMb9, {
          [sty.freeBoxisOpen__yMb9ZR2R]: hasVariant($state, "isOpen", "isOpen")
        })}
      >
        <ChevronIcon
          className={classNames(projectcss.all, sty.svg__ecm7R, {
            [sty.svgisOpen__ecm7RzR2R]: hasVariant($state, "isOpen", "isOpen")
          })}
          role={"img"}
        />

        <div className={classNames(projectcss.all, sty.freeBox__wrbdN)}>
          {p.renderPlasmicSlot({
            defaultContents: "Title",
            value: args.title,
            className: classNames(sty.slotTargetTitle)
          })}
        </div>
      </div>

      {(hasVariant($state, "isOpen", "isOpen") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__qNkQ2, {
            [sty.freeBoxisOpen__qNkQ2ZR2R]: hasVariant(
              $state,
              "isOpen",
              "isOpen"
            )
          })}
        >
          {(hasVariant($state, "isOpen", "isOpen") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__vhiMn, {
                [sty.freeBoxisOpen__vhiMNzR2R]: hasVariant(
                  $state,
                  "isOpen",
                  "isOpen"
                )
              })}
            >
              {(hasVariant($state, "isOpen", "isOpen") ? true : true) ? (
                <ChevronIcon
                  className={classNames(projectcss.all, sty.svg__rS0S, {
                    [sty.svgisOpen__rS0SzR2R]: hasVariant(
                      $state,
                      "isOpen",
                      "isOpen"
                    )
                  })}
                  role={"img"}
                />
              ) : null}
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__cYyja)}>
            {p.renderPlasmicSlot({
              defaultContents: "Content",
              value: args.content,
              className: classNames(sty.slotTargetContent, {
                [sty.slotTargetContentisOpen]: hasVariant(
                  $state,
                  "isOpen",
                  "isOpen"
                )
              })
            })}
          </div>
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCollapse__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCollapse__VariantsArgs;
    args?: PlasmicCollapse__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCollapse__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCollapse__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCollapse__ArgProps,
          internalVariantPropNames: PlasmicCollapse__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCollapse__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCollapse";
  } else {
    func.displayName = `PlasmicCollapse.${nodeName}`;
  }
  return func;
}

export const PlasmicCollapse = Object.assign(
  // Top-level PlasmicCollapse renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicCollapse
    internalVariantProps: PlasmicCollapse__VariantProps,
    internalArgProps: PlasmicCollapse__ArgProps
  }
);

export default PlasmicCollapse;
/* prettier-ignore-end */
