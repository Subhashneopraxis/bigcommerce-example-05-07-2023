// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vn4GCfRoYe35APzZGsNDnF
// Component: dv9qw-MMxIGQ3
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: _gxfyOiD26jFy/component
import ProductGrid from "../../ProductGrid"; // plasmic-import: iNyke70nGoPOKT/component
import { ProductBox } from "@plasmicpkgs/commerce"; // plasmic-import: sSIiojQ0-zGH2z/codeComponent
import ProductCard from "../../ProductCard"; // plasmic-import: nH5iseI9bs8m34/component
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: QD8dH-4J4XrXzR/codeComponent
import { ProductPriceComponent } from "@plasmicpkgs/commerce"; // plasmic-import: fzJDSoSq7d4NGS/codeComponent
import { ProductCollection } from "@plasmicpkgs/commerce"; // plasmic-import: k1F944uZV3E4YL/codeComponent
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: nc8Y9S1M-HVVlp/codeComponent
import Hero from "../../Hero"; // plasmic-import: ebwNt8o70vdJfl/component
import Footer from "../../Footer"; // plasmic-import: Ut_4sWTqalBqM5/component

import { useScreenVariants as useScreenVariants_7B4JcqpiMNuGn } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: -7b4JcqpiMNuGn/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_color_tokens/plasmic_plasmic_kit_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_copy_of_big_commerce_example.module.css"; // plasmic-import: vn4GCfRoYe35APzZGsNDnF/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: dv9qw-MMxIGQ3/css

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  productCollection?: p.Flex<typeof ProductCollection>;
  marquee?: p.Flex<"div">;
  marquee2?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
  text?: p.Flex<"div">;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_7B4JcqpiMNuGn()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <ProductGrid
            className={classNames("__wab_instance", sty.productGrid___8Xl9E)}
            product0={
              <ProductBox
                className={classNames("__wab_instance", sty.productBox___8BFqQ)}
                id={"77" as const}
              >
                <ph.DataCtxReader>
                  {$ctx => (
                    <React.Fragment>
                      <ProductCard
                        className={classNames(
                          "__wab_instance",
                          sty.productCard__oFsZx
                        )}
                        color={"violet" as const}
                      >
                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField__iuwKz
                          )}
                          field={"name" as const}
                        />
                      </ProductCard>

                      <ProductCollection
                        data-plasmic-name={"productCollection"}
                        data-plasmic-override={overrides.productCollection}
                        className={classNames(
                          "__wab_instance",
                          sty.productCollection
                        )}
                        emptyMessage={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jUnf
                                )}
                              >
                                {"No product found!"}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        }
                        loadingMessage={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__efwPu
                                )}
                              >
                                {"Loading..."}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        }
                      >
                        <ph.DataCtxReader>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__tXrPa
                              )}
                            >
                              <ProductTextField
                                className={classNames(
                                  "__wab_instance",
                                  sty.productTextField__cyoQ5
                                )}
                                field={"name" as const}
                              />

                              <ProductMedia
                                className={classNames(
                                  "__wab_instance",
                                  sty.productMedia__yIoS2
                                )}
                              />
                            </div>
                          )}
                        </ph.DataCtxReader>
                      </ProductCollection>
                    </React.Fragment>
                  )}
                </ph.DataCtxReader>
              </ProductBox>
            }
            product1={
              <ProductBox
                className={classNames("__wab_instance", sty.productBox__uyUrk)}
                id={"81" as const}
              >
                <ph.DataCtxReader>
                  {$ctx => (
                    <ProductCard
                      className={classNames(
                        "__wab_instance",
                        sty.productCard___95Y32
                      )}
                      color={"white" as const}
                    >
                      <ProductTextField
                        className={classNames(
                          "__wab_instance",
                          sty.productTextField__xiWNu
                        )}
                        field={"name" as const}
                      />
                    </ProductCard>
                  )}
                </ph.DataCtxReader>
              </ProductBox>
            }
            product2={
              <ProductBox
                className={classNames("__wab_instance", sty.productBox__ouFno)}
                id={"86" as const}
              >
                <ph.DataCtxReader>
                  {$ctx => (
                    <ProductCard
                      className={classNames(
                        "__wab_instance",
                        sty.productCard__guhOb
                      )}
                      color={"pink" as const}
                    >
                      <ProductTextField
                        className={classNames(
                          "__wab_instance",
                          sty.productTextField__ha6CS
                        )}
                        field={"name" as const}
                      />
                    </ProductCard>
                  )}
                </ph.DataCtxReader>
              </ProductBox>
            }
          />

          <div
            data-plasmic-name={"marquee"}
            data-plasmic-override={overrides.marquee}
            className={classNames(projectcss.all, sty.marquee)}
          >
            {true ? (
              <div
                className={classNames(projectcss.all, sty.freeBox___9SkKz)}
                test={"test" as const}
              >
                <ProductBox
                  className={classNames(
                    "__wab_instance",
                    sty.productBox__i9Jru
                  )}
                  id={"88" as const}
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <ProductCard
                        className={classNames(
                          "__wab_instance",
                          sty.productCard___8XktB
                        )}
                        shape={"slim" as const}
                      >
                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField__qw2Ld
                          )}
                          field={"name" as const}
                        />
                      </ProductCard>
                    )}
                  </ph.DataCtxReader>
                </ProductBox>
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__qosSw)}>
                <ProductBox
                  className={classNames(
                    "__wab_instance",
                    sty.productBox__f7Ks0
                  )}
                  id={"93" as const}
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <ProductCard
                        className={classNames(
                          "__wab_instance",
                          sty.productCard__t5Pww
                        )}
                        shape={"slim" as const}
                      >
                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField__ivKx1
                          )}
                          field={"name" as const}
                        />
                      </ProductCard>
                    )}
                  </ph.DataCtxReader>
                </ProductBox>
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__aqJJb)}>
                <ProductBox
                  className={classNames(
                    "__wab_instance",
                    sty.productBox__oBIuF
                  )}
                  id={"97" as const}
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <ProductCard
                        className={classNames(
                          "__wab_instance",
                          sty.productCard__nHnN
                        )}
                        shape={"slim" as const}
                      >
                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField___6DjQn
                          )}
                          field={"name" as const}
                        />
                      </ProductCard>
                    )}
                  </ph.DataCtxReader>
                </ProductBox>
              </div>
            ) : null}
          </div>

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__sPuDp)}>
              <Hero className={classNames("__wab_instance", sty.hero__n9U3E)} />
            </div>
          ) : null}

          <ProductGrid
            className={classNames("__wab_instance", sty.productGrid__qpq0A)}
            layout={"b" as const}
            product0={
              <ProductBox
                className={classNames("__wab_instance", sty.productBox__yKp4V)}
                id={"81" as const}
              >
                <ph.DataCtxReader>
                  {$ctx => (
                    <ProductCard
                      className={classNames(
                        "__wab_instance",
                        sty.productCard__r1T9S
                      )}
                      color={"violet" as const}
                    >
                      <ProductTextField
                        className={classNames(
                          "__wab_instance",
                          sty.productTextField__j20E
                        )}
                        field={"name" as const}
                      />
                    </ProductCard>
                  )}
                </ph.DataCtxReader>
              </ProductBox>
            }
            product1={
              <ProductBox
                className={classNames("__wab_instance", sty.productBox__toxx8)}
                id={"98" as const}
              >
                <ph.DataCtxReader>
                  {$ctx => (
                    <ProductCard
                      className={classNames(
                        "__wab_instance",
                        sty.productCard__jxZ3K
                      )}
                      color={"white" as const}
                    >
                      <ProductTextField
                        className={classNames(
                          "__wab_instance",
                          sty.productTextField__iGiX9
                        )}
                        field={"name" as const}
                      />
                    </ProductCard>
                  )}
                </ph.DataCtxReader>
              </ProductBox>
            }
            product2={
              <ProductBox
                className={classNames("__wab_instance", sty.productBox__sdcxs)}
                id={"77" as const}
              >
                <ph.DataCtxReader>
                  {$ctx => (
                    <ProductCard
                      className={classNames(
                        "__wab_instance",
                        sty.productCard__jbGxh
                      )}
                      color={"pink" as const}
                    >
                      <ProductTextField
                        className={classNames(
                          "__wab_instance",
                          sty.productTextField__zvNkp
                        )}
                        field={"name" as const}
                      />
                    </ProductCard>
                  )}
                </ph.DataCtxReader>
              </ProductBox>
            }
          />

          <div
            data-plasmic-name={"marquee2"}
            data-plasmic-override={overrides.marquee2}
            className={classNames(projectcss.all, sty.marquee2)}
          >
            {true ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__wfuaZ)}
                test={"test" as const}
              >
                <ProductBox
                  className={classNames(
                    "__wab_instance",
                    sty.productBox___27PlC
                  )}
                  id={"94" as const}
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <ProductCard
                        className={classNames(
                          "__wab_instance",
                          sty.productCard__n1YTx
                        )}
                        color={"black" as const}
                        shape={"slim" as const}
                      >
                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField__zdM7R
                          )}
                          field={"name" as const}
                        />
                      </ProductCard>
                    )}
                  </ph.DataCtxReader>
                </ProductBox>
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__x8TGu)}>
                <ProductBox
                  className={classNames("__wab_instance", sty.productBox__tvP0)}
                  id={"103" as const}
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <ProductCard
                        className={classNames(
                          "__wab_instance",
                          sty.productCard__uWpD
                        )}
                        color={"black" as const}
                        shape={"slim" as const}
                      >
                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField__hqX6Q
                          )}
                          field={"name" as const}
                        />
                      </ProductCard>
                    )}
                  </ph.DataCtxReader>
                </ProductBox>
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__yDdMb)}>
                <ProductBox
                  className={classNames(
                    "__wab_instance",
                    sty.productBox__ysmJ8
                  )}
                  id={"97" as const}
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <ProductCard
                        className={classNames(
                          "__wab_instance",
                          sty.productCard__fm1W
                        )}
                        color={"black" as const}
                        shape={"slim" as const}
                      >
                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField__gYebw
                          )}
                          field={"name" as const}
                        />
                      </ProductCard>
                    )}
                  </ph.DataCtxReader>
                </ProductBox>
              </div>
            ) : null}
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />

          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Enter some text"}
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "productCollection",
    "marquee",
    "marquee2",
    "footer",
    "text"
  ],
  navbar: ["navbar"],
  productCollection: ["productCollection"],
  marquee: ["marquee"],
  marquee2: ["marquee2"],
  footer: ["footer"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  productCollection: typeof ProductCollection;
  marquee: "div";
  marquee2: "div";
  footer: typeof Footer;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    productCollection: makeNodeComponent("productCollection"),
    marquee: makeNodeComponent("marquee"),
    marquee2: makeNodeComponent("marquee2"),
    footer: makeNodeComponent("footer"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
